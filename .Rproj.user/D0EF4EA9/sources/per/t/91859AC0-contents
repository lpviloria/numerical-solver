# CMSC 150 - AB5L Lab
# Exercise No. 4 
# MGATolentino | Oct. 27, 2023
# ----------------------------

#a <- c(1, 3, 6, 7)
#b <- c(10, 20, 19, 33)

# function for Gauss-Jordan elimination method to solve a system of linear equations
gaussJordanElimination <- function(a, b) 
{
  c <- cbind(a, b) 
  d <- length(b)
  
  # perform Gauss-Jordan elimination
  for (i in 1:d) 
  {
    pivot <- c[i, i]  
    
    # normalize the current row with the pivot value
    c[i, ] <- c[i, ] / pivot 
    
    # eliminate other entries in the current column
    for (j in 1:d) 
    {
      if (j != i) 
      {
        factor <- c[j, i]  
        c[j, ] <- c[j, ] - factor * c[i, ]  
      }
    }
  }
  
  # extract the solution vector from the last column of the augmented matrix
  x <- c[, d + 1]  
  
  return(x)  
}

# function for polynomial regression of degree d
PolynomialRegression <- function(d, data, xest) {
  x <- data[[1]] 
  y <- data[[2]] 
  
  # augmented coefficient matrix with appropriate dimensions
  augcoeffmatrix <- matrix(NA, ncol = d + 2, nrow = d + 1)
  
  # fill the augmented coefficient matrix
  for (i in 1:(d + 1)) 
  {   
    for (j in 1:(d + 2)) 
    {
      augcoeffmatrix[i, j] <- sum(x^(i + j - 2))
    }
  }
  
  # compute the right-hand side placed in the last column
  for (i in 0:d) 
  { 
    augcoeffmatrix[i + 1, d + 2] <- sum(x^i * y)
  }
  
  # solve the system of equations using Gauss-Jordan elimination
  coefficients <- gaussJordanElimination(augcoeffmatrix[, 1:(d + 2)], augcoeffmatrix[, d + 2]) # for the coefficients of the polynomial
  
  # polynomial string for the regression equation
  polynomial_string <- paste("function(x) ", paste(coefficients, "*", "x ^", 0:d, sep = "", collapse = " + ")) 
  
  # polynomial function using the polynomial string
  polynomial_function <- eval(parse(text = polynomial_string))
  
  estimate = eval(polynomial_function(xest))
  
  # results in a list
  result <- list(augcoeffmatrix = augcoeffmatrix, coefficients = coefficients, polynomial_string = polynomial_string, polynomial_function = polynomial_function, estimate = estimate)
  
  return(result)
}


# For Part 2:
a <- c(100, 150, 200, 250, 300, 400, 500, 600, 650, 700, 750, 800, 850, 900, 950, 1000)
b <- c(36, 33.8, 33, 32.4, 31.8, 30.8, 29.3, 27.6, 26.7, 25.8, 24.9, 24.1, 23.4, 22.8, 21.1, 21.4)

# Perform polynomial regression of degree 1, 2, and 3 on the given problem
print(PolynomialRegression(4, list(a, b), 150))
# print(PolynomialRegression(2, list(a, b), 10)
# print(PolynomialRegression(3, list(a, b), 10)
# print(PolynomialRegression(4, list(a, b), 10)
# print(PolynomialRegression(5, list(a, b), 10)